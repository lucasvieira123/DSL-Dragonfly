package WrapperDSL.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class While_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);

    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.condition$IZns), CONCEPTS.RelativeDistanceConditionalExpression$1N)) {
      tgs.append("        new StopWatch(0,1000) {\n            @Override\n            public void task() {\n                Platform.runLater(() -> {");
      tgs.newLine();
      for (SNode item : SLinkOperations.getChildren(ctx.getPrimaryInput(), LINKS.body$J4KN)) {
        tgs.appendNode(item);
      }
      tgs.newLine();
      tgs.append("                });\n\n            }");
      tgs.newLine();

      tgs.append("            @Override\n            public boolean conditionStop() {");
      tgs.newLine();
      tgs.append("                return ");
      tgs.append("!(");
      tgs.appendNode(SLinkOperations.getTarget(ctx.getPrimaryInput(), LINKS.condition$IZns));
      tgs.append(");");
      tgs.newLine();
      tgs.append("            }");
      tgs.newLine();
      tgs.append("        };");
      tgs.newLine();

    } else {
      tgs.append(" ");
    }


  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink body$J4KN = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b45acL, 0x53be3ecc045b45d4L, "body");
    /*package*/ static final SContainmentLink condition$IZns = MetaAdapterFactory.getContainmentLink(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53be3ecc045b45acL, 0x53be3ecc045b45d2L, "condition");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept RelativeDistanceConditionalExpression$1N = MetaAdapterFactory.getConcept(0x3e1c68c4ebe640bdL, 0xa27fe74585aa2487L, 0x53e04e3aef164336L, "WrapperDSL.structure.RelativeDistanceConditionalExpression");
  }
}
